"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const constants_1 = __importDefault(require("../constants"));
const { blue, bold, cyan } = chalk_1.default;
const createJasmineConfiguration = async () => {
    console.info(cyan(`Sir, ${blue(bold(`${constants_1.default.username}`))}... 🙋🏻 install needed Dependencies for jasmine and add configuration... so relax and 🤌🏻`));
    await (0, child_process_1.execSync)('npm install supertest@^6.1.6 jasmine-spec-reporter@^7.0.0 jasmine@^3.10.0');
    await (0, child_process_1.execSync)('npm install --save-dev @types/jasmine@3.10.2 @types/supertest@^2.0.11');
    await (0, child_process_1.execSync)('npm set-script test "npx tsc && jasmine"');
    const configFolderPath = path_1.default.join(constants_1.default.appRoot, 'config');
    await fs_extra_1.default.mkdirSync('spec/support', { recursive: true });
    const jasmineFilePath = path_1.default.join(process.cwd(), 'spec', 'support', 'jasmine.json');
    const jasmineConfigBuffer = await fs_extra_1.default.readFile(path_1.default.join(configFolderPath, 'jasmine.json'));
    await fs_extra_1.default.writeFile(jasmineFilePath, jasmineConfigBuffer.toString());
    await fs_extra_1.default.mkdirSync('src/tests/helpers', { recursive: true });
    const jasmineReporterFilePath = path_1.default.join(process.cwd(), 'src', 'tests', 'helpers', 'reporter.ts');
    const jasmineReporterConfigBuffer = await fs_extra_1.default.readFile(path_1.default.join(configFolderPath, 'reporter.ts'));
    await fs_extra_1.default.writeFile(jasmineReporterFilePath, jasmineReporterConfigBuffer.toString());
    const baseTestFilePath = path_1.default.join(process.cwd(), 'src', 'tests', 'index.spec.ts');
    const baseTestConfigBuffer = await fs_extra_1.default.readFile(path_1.default.join(configFolderPath, 'index.spec.ts'));
    await fs_extra_1.default.writeFile(baseTestFilePath, baseTestConfigBuffer.toString());
    console.group(`I am finished Sir from adding jasmine configuration, and Here's what I did:- `);
    console.log('✅ starter files successfully created, feel free to play with it');
    console.log(`✅ u can use ${blue('npm run test')} to start testing I created simple one for you`);
    console.groupEnd();
};
exports.default = createJasmineConfiguration;
//# sourceMappingURL=testing-jasmine.module.js.map