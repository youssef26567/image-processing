"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const get_config_files_1 = __importDefault(require("../utils/get-config-files"));
const constants_1 = __importDefault(require("../constants"));
const { blue, bold, cyan } = chalk_1.default;
const createTypeScriptConfiguration = async (framework) => {
    console.info(cyan(`Sir, ${blue(bold(`${constants_1.default.username}`))}... 🙋🏻 one second and you will find tsconfig.json file in your project.. so relax and 🤌🏻`));
    const configFolderPath = path_1.default.join(constants_1.default.appRoot, 'config');
    const frameworksConfigFiles = (await get_config_files_1.default.getConfigFiles(configFolderPath)) || {};
    const targetFrameworkConfigBuffer = await fs_extra_1.default.readFile(frameworksConfigFiles[framework]);
    const tsconfig = path_1.default.join(process.cwd(), 'tsconfig.json');
    await fs_extra_1.default.writeFile(tsconfig, targetFrameworkConfigBuffer.toString());
    console.log(blue(`😋😋 Sir, ${blue(bold(`${constants_1.default.username}`))}... ✅ tsconfig.json successfully created 😋😋`));
};
exports.default = createTypeScriptConfiguration;
//# sourceMappingURL=typescript.module.js.map