"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const constants_1 = __importDefault(require("../constants"));
const { blue, bold, cyan } = chalk_1.default;
const createEslintConfiguration = async (framework) => {
    console.info(cyan(`Sir, ${blue(bold(`${constants_1.default.username}`))}... 🙋🏻 one second and you will find eslint configured in your project.. so relax and 🤌🏻`));
    const eslintignore = path_1.default.join(process.cwd(), '.eslintignore');
    if (framework === 'node') {
        await (0, child_process_1.execSync)('npm install --save-dev eslint eslint-config-prettier eslint-plugin-prettier @typescript-eslint/eslint-plugin @typescript-eslint/parser');
        const eslintjs = path_1.default.join(process.cwd(), '.eslintrc.js');
        const configFolderPath = path_1.default.join(constants_1.default.appRoot, 'config');
        const eslintConfigBuffer = await fs_extra_1.default.readFile(path_1.default.join(configFolderPath, 'eslintrc.js'));
        await fs_extra_1.default.writeFile(eslintjs, eslintConfigBuffer.toString());
    }
    await fs_extra_1.default.writeFile(eslintignore, 'node_modules\nbuild');
    await (0, child_process_1.execSync)('npm set-script lint "eslint . --ext .ts"');
    console.log(blue(`😋😋 Sir, ${blue(bold(`${constants_1.default.username}`))}... ✅ eslint successfully configured 😋😋`));
};
exports.default = createEslintConfiguration;
//# sourceMappingURL=eslint.module.js.map